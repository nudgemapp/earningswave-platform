// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  firstName    String?
  lastName     String?
  email        String?      @unique
  subscription Subscription? @relation("UserSubscription")
  invoices     Invoice[]    @relation("UserInvoices")
  watchlist    WatchlistEntry[]

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Subscription {
  id                        String   @id @default(uuid())
  subscription_id           String   @unique
  stripe_user_id            String   @unique
  status                    String
  start_date                DateTime
  end_date                  DateTime
  plan_id                   String
  default_payment_method_id String?
  email                     String?
  user_id                   String   @unique
  user                      User     @relation("UserSubscription", fields: [user_id], references: [id])
  invoices                  Invoice[] @relation("SubscriptionInvoices")

  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model Invoice {
  id               String   @id @default(uuid())
  invoice_id       String   @unique
  subscription_id  String
  subscription     Subscription @relation("SubscriptionInvoices", fields: [subscription_id], references: [subscription_id])
  amount_paid      Int
  currency         String?
  status           String
  email            String
  user_id          String
  user             User     @relation("UserInvoices", fields: [user_id], references: [id])
  period_start     DateTime
  period_end       DateTime

  createdAt        DateTime @default(now())
}

model Payment {
  id               String   @id @default(uuid())
  user_id          String
  stripe_id        String   @unique
  email            String
  amount           Float
  customer_details String
  payment_intent   String
  payment_time     DateTime
  currency         String

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model EarningsCallTranscript {
  id                Int      @id @default(autoincrement())
  href              String   @db.VarChar(255)
  date              DateTime
  title             String   @db.VarChar(255)
  company_info      Json
  contents          String[]
  sections          Json
  call_participants String[]
  full_text         String   @db.Text
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  logo_id           Int?
  companyId         Int?     // Make it optional with the ?

  company           Company? @relation(fields: [companyId], references: [id]) // Make relation optional too
  logo              Logo?    @relation(fields: [logo_id], references: [id])

  @@index([date])
  @@index([companyId, date])
}

model Logo {
  id         Int       @id @default(autoincrement())
  filename   String
  data       Bytes
  companies  Company[]

  created_at DateTime  @default(now())

  // One logo can be associated with many transcripts
  earningsCallTranscripts EarningsCallTranscript[]
}

enum MarketTiming {
  PRE_MARKET
  AFTER_HOURS
  NOT_SUPPLIED
}

model EarningsReport {
  id                String       @id @default(uuid())
  symbol            String
  name              String
  reportDate        DateTime
  fiscalDateEnding  DateTime
  estimate          Float?
  currency          String
  marketTiming      MarketTiming?
  lastYearEPS      Float?
  lastYearReportDate DateTime?
  lastYearRevenue   Float?
  companyId         Int
  company           Company     @relation(fields: [companyId], references: [id])

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@unique([symbol, companyId, reportDate, fiscalDateEnding])
  @@index([reportDate])
  @@index([companyId, reportDate])
}

model Company {
  id              Int              @id @default(autoincrement())
  symbol          String           @unique
  name            String
  exchanges       Exchange[]       @relation("CompanyExchanges")
  marketCap       Decimal?         // in billions
  price           Decimal?
  revenue         Decimal?         // in billions
  earningsReports EarningsReport[]
  logo            Logo?            @relation(fields: [logoId], references: [id])
  logoId          Int?
  earningsCallTranscripts EarningsCallTranscript[]
  watchlistEntries WatchlistEntry[]

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

enum ExchangeType {
  NYSE
  NASDAQ
}

model Exchange {
  id        Int          @id @default(autoincrement())
  name      ExchangeType @unique
  companies Company[]    @relation("CompanyExchanges")

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Email {
  id        String   @id @default(uuid())
  address   String   @unique

  createdAt DateTime @default(now())
}

model WatchlistEntry {
  id        String   @id @default(uuid())
  userId    String
  companyId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  addedAt   DateTime @default(now())

  @@unique([userId, companyId])
  @@index([userId])
  @@index([companyId])
}

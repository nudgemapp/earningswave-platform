"use client";

import React, { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Sparkles } from "lucide-react";
import { ProcessedReport } from "../types";

interface AIEarningsAnalysisProps {
  report: ProcessedReport;
}

interface AnalysisItem {
  title: string;
  description: string;
}

interface AIAnalysis {
  quarter: string;
  positives: AnalysisItem[];
  risks?: AnalysisItem[];
}

const AIEarningsAnalysis: React.FC<AIEarningsAnalysisProps> = ({ report }) => {
  const [aiAnalysis, setAiAnalysis] = useState<AIAnalysis | null>(null);
  const [isAiLoading, setIsAiLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const quarterNum = Math.floor(new Date(report.fiscalDateEnding).getMonth() / 3) + 1;

  useEffect(() => {
    const fetchAiAnalysis = async () => {
      if (!report.symbol) return;

      try {
        setIsAiLoading(true);
        setError(null);
        const response = await fetch('/api/earnings/analysis', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            symbol: report.symbol,
            estimate: report.estimate,
            lastYearEPS: report.lastYearEPS,
            reportDate: report.reportDate,
            fiscalDateEnding: report.fiscalDateEnding,
          }),
        });

        if (!response.ok) throw new Error('Failed to fetch AI analysis');
        const data = await response.json();
        setAiAnalysis(data);
      } catch (error) {
        console.error('Error fetching AI analysis:', error);
        setError('Unable to generate analysis. Please try again later.');
      } finally {
        setIsAiLoading(false);
      }
    };

    fetchAiAnalysis();
  }, [report]);

  if (error) {
    return (
      <Card className="w-full shadow-lg bg-white">
        <CardContent className="p-6">
          <p className="text-red-500 text-center">{error}</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="w-full shadow-lg bg-white">
      <CardHeader className="space-y-2">
        <div className="flex items-center justify-between">
          <div>
            <CardTitle className="text-xl font-bold">
              {`Q${quarterNum} ${new Date(report.fiscalDateEnding).getFullYear()} Analysis`}
            </CardTitle>
            <p className="text-sm text-gray-500">Generated by AI, may be inaccurate</p>
          </div>
          <div className="flex items-center gap-2">
            <Sparkles className="h-5 w-5 text-purple-400" />
          </div>
        </div>
      </CardHeader>

      <CardContent>
        {isAiLoading ? (
          <div className="flex items-center justify-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-500"></div>
          </div>
        ) : aiAnalysis ? (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold mb-4">Positives:</h3>
              <div className="space-y-4">
                {aiAnalysis.positives.map((item, index) => (
                  <div key={index} className="space-y-1">
                    <h4 className="font-semibold">{index + 1}. {item.title}</h4>
                    <p className="text-gray-600">{item.description}</p>
                  </div>
                ))}
              </div>
            </div>

            {aiAnalysis.risks && aiAnalysis.risks.length > 0 && (
              <div>
                <h3 className="text-lg font-semibold mb-4">Risks:</h3>
                <div className="space-y-4">
                  {aiAnalysis.risks.map((item, index) => (
                    <div key={index} className="space-y-1">
                      <h4 className="font-semibold">{index + 1}. {item.title}</h4>
                      <p className="text-gray-600">{item.description}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        ) : (
          <p className="text-gray-500 text-center py-4">No analysis available</p>
        )}
      </CardContent>
    </Card>
  );
};

export default AIEarningsAnalysis;

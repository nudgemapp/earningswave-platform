// import { NextResponse } from "next/server";
// import prisma from "@/lib/prismadb";
// import { MarketTime, TranscriptStatus } from "@prisma/client";

// interface PrismaError {
//   code?: string;
//   message: string;
// }

// export async function GET() {
//   try {
//     const companies = await prisma.company.findMany({
//       select: {
//         id: true,
//         symbol: true,
//       },
//     });

//     console.log(`Found ${companies.length} companies to process`);

//     const from = "2024-11-10";
//     const to = "2029-12-31";

//     let addedTranscripts = 0;
//     let companiesWithEarnings = 0;
//     let missingHourCount = 0;

//     // Process each company
//     for (const company of companies) {
//       const earningsResponse = await fetch(
//         `https://finnhub.io/api/v1/calendar/earnings?from=${from}&to=${to}&symbol=${company.symbol}&token=${process.env.NEXT_PUBLIC_FINNHUB_API_KEY}`
//       );

//       const earningsData = await earningsResponse.json();

//       if (!earningsData.earningsCalendar) {
//         console.log(`No earnings data found for ${company.symbol}`);
//         continue;
//       }

//       companiesWithEarnings++;
//       console.log(
//         `\nProcessing ${company.symbol} - Found ${earningsData.earningsCalendar.length} earnings events`
//       );

//       // Process each earnings event
//       for (const earning of earningsData.earningsCalendar) {
//         const marketTime = mapHourToMarketTime(earning.hour);
//         if (marketTime === MarketTime.UNKNOWN) {
//           missingHourCount++;
//         }

//         try {
//           // Create the transcript record
//           await prisma.transcript.create({
//             data: {
//               id: `${company.symbol}_${earning.date}`,
//               companyId: company.id,
//               scheduledAt: new Date(earning.date),
//               quarter: earning.quarter,
//               year: earning.year,
//               MarketTime: marketTime,
//               status: TranscriptStatus.SCHEDULED,
//               epsEstimate: earning.epsEstimate,
//               revenueEstimate: earning.revenueEstimate,
//             },
//           });

//           addedTranscripts++;
//           console.log(
//             `Added transcript for ${company.symbol} on ${earning.date}`
//           );
//         } catch (error: unknown) {
//           const prismaError = error as PrismaError;
//           if (prismaError.code === "P2002") {
//             console.log(
//               `Skipping duplicate transcript for ${company.symbol} on ${earning.date}`
//             );
//           } else {
//             console.error(
//               `Error adding transcript for ${company.symbol}:`,
//               prismaError.message
//             );
//           }
//         }
//       }

//       // Add delay to avoid rate limiting
//       await new Promise((resolve) => setTimeout(resolve, 100));
//     }

//     console.log("\nSummary Statistics:");
//     console.log(`Total companies processed: ${companies.length}`);
//     console.log(`Companies with earnings data: ${companiesWithEarnings}`);
//     console.log(`Successfully added transcripts: ${addedTranscripts}`);
//     console.log(`Events missing market time: ${missingHourCount}`);

//     return NextResponse.json({
//       success: true,
//       stats: {
//         totalCompanies: companies.length,
//         companiesWithEarnings,
//         addedTranscripts,
//         missingHourCount,
//       },
//     });
//   } catch (error: unknown) {
//     console.error("Error syncing earnings:", error);
//     return NextResponse.json(
//       {
//         error: "Failed to sync earnings data",
//         details: error instanceof Error ? error.message : String(error),
//       },
//       { status: 500 }
//     );
//   }
// }

// function mapHourToMarketTime(hour: string): MarketTime {
//   switch (hour.toLowerCase()) {
//     case "bmo":
//       return MarketTime.BMO;
//     case "amc":
//       return MarketTime.AMC;
//     case "dmh":
//       return MarketTime.DMH;
//     default:
//       return MarketTime.UNKNOWN;
//   }
// }

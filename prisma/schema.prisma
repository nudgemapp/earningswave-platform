// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String       @id @default(uuid())
  firstName    String?
  lastName     String?
  email        String?      @unique
  subscription Subscription? @relation("UserSubscription")
  invoices     Invoice[]    @relation("UserInvoices")
  watchlist    WatchlistEntry[]

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Email {
  id        String   @id @default(uuid())
  address   String   @unique

  createdAt DateTime @default(now())
}

model Subscription {
  id                        String   @id @default(uuid())
  subscription_id           String   @unique
  stripe_user_id            String   @unique
  status                    String
  start_date                DateTime
  end_date                  DateTime
  plan_id                   String
  default_payment_method_id String?
  email                     String?
  user_id                   String   @unique
  user                      User     @relation("UserSubscription", fields: [user_id], references: [id])
  invoices                  Invoice[] @relation("SubscriptionInvoices")

  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model Invoice {
  id               String   @id @default(uuid())
  invoice_id       String   @unique
  subscription_id  String
  subscription     Subscription @relation("SubscriptionInvoices", fields: [subscription_id], references: [subscription_id])
  amount_paid      Int
  currency         String?
  status           String
  email            String
  user_id          String
  user             User     @relation("UserInvoices", fields: [user_id], references: [id])
  period_start     DateTime
  period_end       DateTime

  createdAt        DateTime @default(now())
}

model Payment {
  id               String   @id @default(uuid())
  user_id          String
  stripe_id        String   @unique
  email            String
  amount           Float
  customer_details String
  payment_intent   String
  payment_time     DateTime
  currency         String

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

enum MarketTime {
  BMO      // Before Market Open (equivalent to PRE_MARKET)
  AMC      // After Market Close (equivalent to AFTER_HOURS)
  DMH      // During Market Hours (this is missing from your original enum)
  UNKNOWN  // When timing is not supplied (better name than NOT_SUPPLIED)
}

enum TranscriptStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

model Company {
  id            String       @id @default(cuid())
  currency      String       // Trading currency
  description   String       // Company name/description
  displaySymbol String       // Display version of symbol
  figi          String?      @unique  // FIGI identifier should be unique
  isin          String?      @unique  // ISIN number should be unique
  mic           MIC         // Market Identifier Code (XNYS or XNAS)
  shareClassFIGI String?     @unique  // Share class FIGI should be unique
  symbol        String       // Primary trading symbol
  symbol2       String?      // Alternative symbol if any
  type          String       // Security type (Common Stock, ETF, etc)


  transcripts   Transcript[] // Relation to transcripts
  watchlist     WatchlistEntry[] // Add relation to WatchlistEntry

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  country              String?      // Country code (e.g., "US")
  exchange             String?      // Full exchange name
  ipo                  DateTime?    // IPO date
  marketCapitalization Float?       // Market cap in millions
  name                 String?      // Official company name
  phone                String?      // Company phone number
  sharesOutstanding    Float?       // Number of shares outstanding in millions
  weburl               String?      // Company website URL
  logo                 String?      // URL to hosted logo image
  finnhubIndustry      String?      // Industry classification

  @@unique([symbol, mic])  // Symbol must be unique within each exchange
  @@index([symbol, type, mic]) // Composite index for filtering
  @@index([marketCapitalization]) // For sorting by market cap
  @@index([symbol, name]) // Add this index if you search by these fields
}

enum MIC {
  XNYS
  XNAS
}

model Transcript {
  id          String        @id @unique // e.g. "NVDA_3393990"
  companyId   String        
  title       String?        // Optional: future calls might not have title yet
  scheduledAt DateTime      // Store the 'time' field
  quarter     Int?         // Optional: some transcripts don't have this
  year        Int?         // Optional: some transcripts don't have this
  audioUrl    String?      // Optional: for audio recordings
  MarketTime  MarketTime   // BMO/AMC/etc
  status      TranscriptStatus
  
  // Financial data (for both past and future calls)
  epsActual       Float?
  epsEstimate     Float?
  revenueActual   Float?
  revenueEstimate Float?
  
  // Full transcript data (only for completed calls)
  fullText    String?      @db.Text  // Complete transcript text
  speakers    Json?        // Array of all speakers/participants
  
  // Relations
  participants Participant[]
  company      Company       @relation(fields: [companyId], references: [id])

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@unique([companyId, scheduledAt])  // One transcript per company per time
  @@index([scheduledAt, status, quarter]) // Composite index for common query patterns
  @@index([companyId, scheduledAt])
  @@index([status, scheduledAt]) // For filtering by status and date range
  @@index([scheduledAt, status]) // Add this index
  @@index([companyId, scheduledAt, status]) // Add this index
}

model Participant {
  id           String     @id @default(cuid())
  transcriptId String
  transcript   Transcript @relation(fields: [transcriptId], references: [id])
  name         String     // e.g. "Prabhu Ramamoorthy"
  role         String?    // e.g. "executive"
  description  String?    // Additional description if available
  speeches     Speech[]   
  
  @@unique([transcriptId, name])  // Same person can't appear twice in same transcript
  @@index([transcriptId])
}

model Speech {
  id            String      @id @default(cuid())
  participantId String      
  participant   Participant @relation(fields: [participantId], references: [id])
  content       String      @db.Text // The actual speech content
  sequence      Int         // Order in transcript
  sessionType   String?     // e.g. "management_discussion" - kept as String since types vary
  
  createdAt     DateTime    @default(now())

  @@unique([participantId, sequence])  // Each speech must have unique sequence per participant
  @@index([participantId])
  @@index([sessionType])
}

model WatchlistEntry {
  id        String   @id @default(uuid())
  userId    String
  companyId String   
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  addedAt   DateTime @default(now())

  @@unique([userId, companyId])
  @@index([userId])
  @@index([companyId])
}

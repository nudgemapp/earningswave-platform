import { PrismaClient } from "@prisma/client";
import { NextResponse } from "next/server";
import pLimit from "p-limit";

const prisma = new PrismaClient();
const limit = pLimit(10); // Process 10 requests concurrently

export async function GET() {
  try {
    // Get all companies from the database
    const companies = await prisma.company.findMany({
      select: {
        symbol: true,
        id: true,
      },
    });

    console.log(`Found ${companies.length} companies to check`);

    // Get today and yesterday's date
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);

    console.log(today);
    console.log(yesterday);

    const results = {
      totalCompaniesChecked: 0,
      upcomingTranscripts: [] as any[],
    };

    // Process companies in parallel with rate limiting
    const fetchPromises = companies.map((company) =>
      limit(async () => {
        try {
          const response = await fetch(
            `https://finnhub.io/api/v1/stock/transcripts/list?symbol=${company.symbol}&token=${process.env.NEXT_PUBLIC_FINNHUB_API_KEY}`
          );

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const data = await response.json();

          console.log(data);

          // Filter transcripts for today and yesterday
          const recentTranscripts = data.transcripts?.filter((t: any) => {
            const transcriptDate = new Date(t.time);
            transcriptDate.setHours(0, 0, 0, 0);
            return transcriptDate >= yesterday && transcriptDate <= today;
          });

          console.log(recentTranscripts);

          if (recentTranscripts?.length > 0) {
            results.upcomingTranscripts.push(
              ...recentTranscripts.map((t: any) => ({
                ...t,
                companyId: company.id,
              }))
            );
          }

          results.totalCompaniesChecked++;
        } catch (error) {
          console.error(`Error processing ${company.symbol}:`, error);
        }
      })
    );

    // Wait for all requests to complete
    await Promise.all(fetchPromises);

    console.log(`Total companies checked: ${results.totalCompaniesChecked}`);
    console.log(
      `Found ${results.upcomingTranscripts.length} transcripts scheduled for today/yesterday`
    );
    console.log("Upcoming transcripts:", results.upcomingTranscripts);

    return NextResponse.json({
      message: "Transcript check completed",
      results: results.upcomingTranscripts,
    });
  } catch (error) {
    return NextResponse.json(
      {
        error: "Failed to check transcripts",
        details: error instanceof Error ? error.message : String(error),
      },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}
